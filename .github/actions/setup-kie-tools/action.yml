#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: "Setup and bootstrap kie-tools repository"
description: ""

inputs:
  KOGITO_VERSION:
    description: "The version for Kogito Runtime"
    required: false
    default: "999-SNAPSHOT"
  DEPS_BRANCHNAME:
    description: "The branch to pull for Drools, Runtimes and Apps repositories"
    required: false
    default: "main"
  PNPM_FILTER:
    description: "The filter to use for the bootstrap step"
    required: true

runs:
  using: "composite"
  steps:
    - name: Get Kiegroup git ref urls
      env:
        DROOLS_AND_KOGITO__droolsRepoUrl: https://github.com/kiegroup/drools
        DROOLS_AND_KOGITO__kogitoRuntimesRepoUrl: https://github.com/kiegroup/kogito-runtimes
        DROOLS_AND_KOGITO__kogitoAppsRepoUrl: https://github.com/kiegroup/kogito-apps
      id: get_kiegroup_git_refs
      shell: bash
      run: |
        echo "::group::Get Kiegroup git ref urls"

        # Get Kiegroup Drools Git Ref
        DROOLS_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__droolsRepoUrl}}" refs/heads/${{ inputs.DEPS_BRANCHNAME }} | awk '{print $1}')
        echo "DROOLS_AND_KOGITO__droolsRepoGitRef=$DROOLS_GIT_REF" >> "$GITHUB_OUTPUT"

        # Get Kiegroup Runtimes Git Ref
        RUNTIMES_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__kogitoRuntimesRepoUrl}}" refs/heads/${{ inputs.DEPS_BRANCHNAME }} | awk '{print $1}')
        echo "DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef=$RUNTIMES_GIT_REF" >> "$GITHUB_OUTPUT"

        # Get Kiegroup Apps Git Ref
        APPS_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__kogitoAppsRepoUrl}}" refs/heads/${{ inputs.DEPS_BRANCHNAME }} | awk '{print $1}')
        echo "DROOLS_AND_KOGITO__kogitoAppsRepoGitRef=$APPS_GIT_REF" >> "$GITHUB_OUTPUT"

        echo "::endgroup::"

    - name: "Cache Maven repository"
      id: m2
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-drools-${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__droolsRepoGitRef}}-runtimes-${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef }}-apps-${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoAppsRepoGitRef }}
        restore-keys: ${{ runner.os }}-maven

    - name: Clone and Build Drools, Runtimes and Apps repositories
      if: steps.m2.outputs.cache-hit != 'true'
      shell: bash
      env:
        DROOLS_AND_KOGITO__droolsRepoUrl: https://github.com/kiegroup/drools
        DROOLS_AND_KOGITO__kogitoRuntimesRepoUrl: https://github.com/kiegroup/kogito-runtimes
        DROOLS_AND_KOGITO__kogitoAppsRepoUrl: https://github.com/kiegroup/kogito-apps
      run: |
        echo "KOGITO_RUNTIME_version is $KOGITO_RUNTIME_version: Cloning and building extra repositories."
        cd ..

        echo "::group::Cloning drools ${{ inputs.DEPS_BRANCHNAME }} branch..."
        echo "git clone --depth 1 --branch ${{ inputs.DEPS_BRANCHNAME }} ${{ env.DROOLS_AND_KOGITO__droolsRepoUrl}}"
        git clone --depth 1 --branch ${{ inputs.DEPS_BRANCHNAME }} ${{ env.DROOLS_AND_KOGITO__droolsRepoUrl}}
        cd drools
        mvn -B clean install -DskipTests -Dfull
        cd ..
        rm -rf drools
        echo "::endgroup::"

        echo "::group::Cloning kogito-runtimes ${{ inputs.DEPS_BRANCHNAME }} branch..."
        echo "git clone --depth 1 --branch ${{ inputs.DEPS_BRANCHNAME }} ${{ env.DROOLS_AND_KOGITO__kogitoRuntimesRepoUrl}}"
        git clone --depth 1 --branch ${{ inputs.DEPS_BRANCHNAME }} ${{ env.DROOLS_AND_KOGITO__kogitoRuntimesRepoUrl}}
        cd kogito-runtimes
        mvn -B clean install -DskipTests -Dfull
        cd ..
        rm -rf kogito-runtimes
        echo "::endgroup::"

        echo "::group::Cloning kogito-apps ${{ inputs.DEPS_BRANCHNAME }} branch..."
        echo "git clone --depth 1 --branch ${{ inputs.DEPS_BRANCHNAME }} ${{ env.DROOLS_AND_KOGITO__kogitoAppsRepoUrl}}"
        git clone --depth 1 --branch ${{ inputs.DEPS_BRANCHNAME }} ${{ env.DROOLS_AND_KOGITO__kogitoAppsRepoUrl}}
        cd kogito-apps
        mvn -B clean install -DskipTests -Dfull
        cd ..
        rm -rf kogito-apps
        echo "::endgroup::"

    - name: Install org.apache.kie.sonataflow:kie-tools-packages locally
      run: |
        echo "::group::Install Kubesmarts parent POMs locally"
        mvn clean install -N -f pom.xml -DskipTests
        mvn clean install -N -f packages/pom.xml -DskipTests
        echo "::endgroup::"
      shell: bash

    - name: Run pnpm bootstrap - first time
      run: |
        echo "::group::Run pnpm bootstrap - first time"
        pnpm bootstrap -F '@osl/redhat-env...' --no-frozen-lockfile
        echo "::endgroup::"
      env:
        DROOLS_AND_KOGITO__skip: true
        KOGITO_RUNTIME_version: "${{ inputs.KOGITO_VERSION }}"
      shell: bash

    - name: Setup Environment Variables
      run: |
        echo "::group::Setup Environment Variables"
        bash ./.github/supporting-files/ci/osl/export_vars.sh
        echo "::endgroup::"
      shell: bash

    - name: Prepare maven-base with .mvn/maven.config
      id: prepare_maven_base_config
      shell: bash
      run: |
        echo "::group::Prepare maven-base with .mvn/maven.config"
        mkdir ./packages/maven-base/.mvn
        echo "-Dversion.org.kie.kogito=${{ inputs.KOGITO_VERSION }}" > "./packages/maven-base/.mvn/maven.config"
        echo "--no-snapshot-updates" >> "./packages/maven-base/.mvn/maven.config"
        echo "::endgroup::"

    - name: Run pnpm bootstrap - second time
      run: |
        echo "::group::Run pnpm bootstrap - second time"
        eval "pnpm bootstrap ${{ inputs.PNPM_FILTER }} --no-frozen-lockfile"
        echo "::endgroup::"
      env:
        DROOLS_AND_KOGITO__skip: true
        KOGITO_RUNTIME_version: "${{ inputs.KOGITO_VERSION }}"
        DROOLS_AND_KOGITO__droolsRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__droolsRepoGitRef}}"
        DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef}}"
        DROOLS_AND_KOGITO__kogitoAppsRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoAppsRepoGitRef}}"
        # SONATAFLOW_QUARKUS_DEVUI_VERSION: "${{ inputs.KOGITO_VERSION }}"
        SONATAFLOW_DEVMODE_IMAGE__sonataflowQuarkusDevUiVersion: "${{ inputs.KOGITO_VERSION }}"
      shell: bash

    - name: Replace pre-build step in kogito-db-migrator-tool
      shell: bash
      run: |
        echo "::group::Replace pre-build step in kogito-db-migrator-tool"
        sed -i "s/pnpm pre-build && //g" ./packages/kogito-db-migrator-tool/package.json
        echo "::endgroup::"

    # - name: Modify pom.xml of sonataflow-quarkus-devui
    #   shell: bash
    #   run: |
    #     echo "::group::Modify pom.xml of sonataflow-quarkus-devui"
    #     python .github/supporting-files/ci/osl/pom-manipulation/inject-fmp-executions.py
    #     echo "::endgroup::"

    - name: Verify maven-base version.org.kie.kogito
      shell: bash
      run: |
        echo "::group::Verify maven-base version.org.kie.kogito"
        MAVEN_BASE_KOGITO_VERSION=$(mvn help:evaluate \
          -Dexpression=version.org.kie.kogito \
          -q -DforceStdout \
          -f packages/maven-base/pom.xml)

        echo "Detected version.org.kie.kogito: $MAVEN_BASE_KOGITO_VERSION"
        if [ "$MAVEN_BASE_KOGITO_VERSION" != "${{ inputs.KOGITO_VERSION }}" ]; then
          echo "Maven-base KOGITO_VERSION is not ${{ inputs.KOGITO_VERSION }}, got: $MAVEN_BASE_KOGITO_VERSION"
          exit 1
        fi
        echo "::endgroup::"

    - name: Verify root-env version.kogito
      env:
        KOGITO_RUNTIME_version: "${{ inputs.KOGITO_VERSION }}"
      shell: bash
      run: |
        echo "::group::Verify root-env version.kogito"
        ROOT_ENV_KOGITO_VERSION=$(node -p "require('./packages/root-env/env').env.versions.kogito")

        echo "Detected version.kogito: $ROOT_ENV_KOGITO_VERSION"
        if [ "$ROOT_ENV_KOGITO_VERSION" != "${{ inputs.KOGITO_VERSION }}"  ]; then
          echo "Root-env KOGITO_VERSION is not ${{ inputs.KOGITO_VERSION }}, got: $ROOT_ENV_KOGITO_VERSION"
          exit 1
        fi
        echo "::endgroup::"
