#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: "Setup and bootstrap kie-tools repository"
description: ""

inputs:
  KOGITO_VERSION:
    description: "The version for Kogito Runtime"
    required: false
    default: "999-SNAPSHOT"
  DEPS_BRANCHNAME:
    description: "The branch to pull for Drools, Runtimes and Apps repositories"
    required: false
    default: "main"
  PNPM_FILTER:
    description: "The filter to use for the bootstrap step"
    required: true
  WORKING_DIR:
    description: "kie-tools path"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Setup local maven cache
      id: setup_maven_cache
      uses: kubesmarts/kie-tools/.github/actions/setup-maven-cache@main
      with:
        DEPS_BRANCHNAME: ${{ inputs.DEPS_BRANCHNAME }}
        WORKING_DIR: ${{ inputs.WORKING_DIR }}

    - name: Revert SonataFlow Quarkus DevUI POMs to upstream/main
      run: |
        echo "::group::Revert SonataFlow Quarkus DevUI POMs to upstream/main"
        cd ${{ inputs.WORKING_DIR }}
        git remote add upstream https://github.com/apache/incubator-kie-tools.git
        git fetch upstream main
        git checkout upstream/main -- packages/sonataflow-quarkus-devui/pom.xml packages/sonataflow-quarkus-devui/sonataflow-quarkus-devui-bom/pom.xml packages/sonataflow-quarkus-devui/sonataflow-quarkus-devui-deployment/pom.xml packages/sonataflow-quarkus-devui/sonataflow-quarkus-devui/pom.xml
        echo "::endgroup::"
      shell: bash

    - name: Run pnpm bootstrap - first time
      run: |
        echo "::group::Run pnpm bootstrap - first time"
        cd ${{ inputs.WORKING_DIR }}
        pnpm bootstrap -F '@osl/redhat-env...' --no-frozen-lockfile
        echo "::endgroup::"
      env:
        DROOLS_AND_KOGITO__skip: true
        KOGITO_RUNTIME_version: "${{ inputs.KOGITO_VERSION }}"
      shell: bash

    - name: Setup Environment Variables
      run: |
        echo "::group::Setup Environment Variables"
        cd ${{ inputs.WORKING_DIR }}
        bash ./.github/supporting-files/ci/osl/export_vars.sh
        echo "::endgroup::"
      shell: bash

    - name: Prepare maven-base with .mvn/maven.config
      id: prepare_maven_base_config
      shell: bash
      run: |
        echo "::group::Prepare maven-base with .mvn/maven.config"
        cd ${{ inputs.WORKING_DIR }}
        mkdir ./packages/maven-base/.mvn
        echo "-Dversion.org.kie.kogito=${{ inputs.KOGITO_VERSION }}" > "./packages/maven-base/.mvn/maven.config"
        echo "--no-snapshot-updates" >> "./packages/maven-base/.mvn/maven.config"
        echo "::endgroup::"

    - name: Run pnpm bootstrap - second time
      run: |
        echo "::group::Run pnpm bootstrap - second time"
        cd ${{ inputs.WORKING_DIR }}
        eval "pnpm bootstrap ${{ inputs.PNPM_FILTER }} --no-frozen-lockfile"
        echo "::endgroup::"
      env:
        DROOLS_AND_KOGITO__skip: true
        KOGITO_RUNTIME_version: "${{ inputs.KOGITO_VERSION }}"
        DROOLS_AND_KOGITO__droolsRepoGitRef: "${{ steps.setup_maven_cache.outputs.droolsRepoGitRef }}"
        DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef: "${{ steps.setup_maven_cache.outputs.kogitoRuntimesRepoGitRef }}"
        DROOLS_AND_KOGITO__kogitoAppsRepoGitRef: "${{ steps.setup_maven_cache.outputs.kogitoAppsRepoGitRef }}"
      shell: bash

    - name: Replace pre-build step in kogito-db-migrator-tool
      shell: bash
      run: |
        echo "::group::Replace pre-build step in kogito-db-migrator-tool"
        cd ${{ inputs.WORKING_DIR }}
        sed -i "s/pnpm pre-build && //g" ./packages/kogito-db-migrator-tool/package.json
        echo "::endgroup::"

    - name: Verify maven-base version.org.kie.kogito
      shell: bash
      run: |
        echo "::group::Verify maven-base version.org.kie.kogito"
        cd ${{ inputs.WORKING_DIR }}
        MAVEN_BASE_KOGITO_VERSION=$(mvn help:evaluate \
          -Dexpression=version.org.kie.kogito \
          -q -DforceStdout \
          -f packages/maven-base/pom.xml)

        echo "Detected version.org.kie.kogito: $MAVEN_BASE_KOGITO_VERSION"
        if [ "$MAVEN_BASE_KOGITO_VERSION" != "${{ inputs.KOGITO_VERSION }}" ]; then
          echo "Maven-base KOGITO_VERSION is not ${{ inputs.KOGITO_VERSION }}, got: $MAVEN_BASE_KOGITO_VERSION"
          exit 1
        fi
        echo "::endgroup::"

    - name: Verify root-env version.kogito
      env:
        KOGITO_RUNTIME_version: "${{ inputs.KOGITO_VERSION }}"
      shell: bash
      run: |
        echo "::group::Verify root-env version.kogito"
        cd ${{ inputs.WORKING_DIR }}
        ROOT_ENV_KOGITO_VERSION=$(node -p "require('./packages/root-env/env').env.versions.kogito")

        echo "Detected version.kogito: $ROOT_ENV_KOGITO_VERSION"
        if [ "$ROOT_ENV_KOGITO_VERSION" != "${{ inputs.KOGITO_VERSION }}"  ]; then
          echo "Root-env KOGITO_VERSION is not ${{ inputs.KOGITO_VERSION }}, got: $ROOT_ENV_KOGITO_VERSION"
          exit 1
        fi
        echo "::endgroup::"
