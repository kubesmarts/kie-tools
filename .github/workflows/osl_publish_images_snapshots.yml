name: "CI :: OSL :: Publish Images Snapshots"

on:
  workflow_dispatch:
    inputs:
      KOGITO_VERSION:
        description: "Specify the version for Kogito Runtime"
        required: false
        default: ""

jobs:
  publish_images_snapshots:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v4

      - name: "Exporting KOGITO_RUNTIME_version"
        run: |
          if [ -n "${{ github.event.inputs.KOGITO_VERSION }}" ]; then
            echo "KOGITO_RUNTIME_version=${{ github.event.inputs.KOGITO_VERSION }}" >> $GITHUB_ENV
            echo "OSL_IMAGE_TAG=${{ github.event.inputs.KOGITO_VERSION }}" >> $GITHUB_ENV
          else
            echo "OSL_IMAGE_TAG=main" >> $GITHUB_ENV
            echo "No KOGITO_VERSION input provided. Keeping the default or existing behavior."
          fi

      - name: "Verify Exported Variables"
        run: |
          echo "KOGITO_RUNTIME_version: $KOGITO_RUNTIME_version"
          echo "OSL_IMAGE_TAG: $OSL_IMAGE_TAG"

      - name: "Setup environment"
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        env:
          PLAYWRIGHT_BASE__installDeps: "true"
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: ${{ vars.IMAGES_UPSTREAM_PNPM_FILTER }}

      - name: "Build Images"
        env:
          KIE_TOOLS_BUILD__buildContainerImages: "true"
          KIE_TOOLS_BUILD__runEndToEndTests: "false"
          KIE_TOOLS_BUILD__runTests: "false"
          # TODO: on upstream implement a root-env named defaultRegistry and defaultAccount and change on every image package
          SONATAFLOW_BUILDER_IMAGE__registry: "quay.io"
          SONATAFLOW_BUILDER_IMAGE__account: "kubesmarts"
          SONATAFLOW_DEVMODE_IMAGE__registry: "quay.io"
          SONATAFLOW_DEVMODE_IMAGE__account: "kubesmarts"
          SONATAFLOW_MANAGEMENT_CONSOLE__registry: "quay.io"
          SONATAFLOW_MANAGEMENT_CONSOLE__account: "kubesmarts"
          KOGITO_DATA_INDEX_EPHEMERAL_IMAGE__registry: "quay.io"
          KOGITO_DATA_INDEX_EPHEMERAL_IMAGE__account: "kubesmarts"
          KOGITO_DATA_INDEX_POSTGRESQL_IMAGE__registry: "quay.io"
          KOGITO_DATA_INDEX_POSTGRESQL_IMAGE__account: "kubesmarts"
          KOGITO_JOBS_SERVICE_EPHEMERAL_IMAGE__registry: "quay.io"
          KOGITO_JOBS_SERVICE_EPHEMERAL_IMAGE__account: "kubesmarts"
          KOGITO_JOBS_SERVICE_POSTGRESQL_IMAGE__registry: "quay.io"
          KOGITO_JOBS_SERVICE_POSTGRESQL_IMAGE__account: "kubesmarts"
          SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry: "quay.io"
          SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount: "kubesmarts"
          SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry: "quay.io"
          SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount: "kubesmarts"
          SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry: "quay.io"
          SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount: "kubesmarts"
          DASHBUILDER__viewerImageRegistry: "quay.io"
          DASHBUILDER__viewerImageAccount: "kubesmarts"
          SONATAFLOW_OPERATOR__registry: "quay.io"
          SONATAFLOW_OPERATOR__account: "kubesmarts"

        run: >-
          eval "pnpm ${{ vars.IMAGES_UPSTREAM_PNPM_FILTER }} --workspace-concurrency=1 build:prod"

      - name: "Login to Quay"
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_ROBOT_ACCOUNT }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: "Push Images to Quay"
        run: |
          for image in ${{ vars.PUBLISH_IMAGES_LIST }}; do
            echo "Pushing $image to Quay"

            if [ "${{ env.OSL_IMAGE_TAG }}" = "main" ]; then
              echo "OSL_IMAGE_TAG is 'main'. Pushing main tag."
              docker push quay.io/kubesmarts/$image:main || { echo "Failed to push $image:main"; exit 1; }
            else
              echo "OSL_IMAGE_TAG is not 'main'. Tagging and pushing snapshot."
              docker tag quay.io/kubesmarts/$image:main quay.io/kubesmarts/$image:${{ env.OSL_IMAGE_TAG }}
              docker push quay.io/kubesmarts/$image:${{ env.OSL_IMAGE_TAG }} || { echo "Failed to push $image with tag $OSL_IMAGE_TAG to Quay"; exit 1; }
            fi
          done
