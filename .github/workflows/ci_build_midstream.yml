#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build Midstream KIE Tools

on:
  pull_request:
    branches: ["**"]
    types: [opened, reopened, ready_for_review, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Run pnpm bootstrap - first time
        run: pnpm bootstrap -F '@osl/redhat-env...' --no-frozen-lockfile
        env:
          DROOLS_AND_KOGITO__skip: true
          KOGITO_RUNTIME_version: "999-SNAPSHOT"
        shell: bash

      - name: Setup Environment Variables
        run: bash ./.github/supporting-files/ci/osl/export_vars.sh
        shell: bash

      - name: Get Kiegroup git ref urls
        id: get_kiegroup_git_refs
        run: |
          # Get Kiegroup Drools Git Ref
          DROOLS_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__droolsRepoUrl}}" refs/heads/main | awk '{print $1}')
          echo "DROOLS_AND_KOGITO__droolsRepoGitRef=$DROOLS_GIT_REF" >> "$GITHUB_OUTPUT"

          # Get Kiegroup Runtimes Git Ref
          RUNTIMES_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__kogitoRuntimesRepoUrl}}" refs/heads/main | awk '{print $1}')
          echo "DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef=$RUNTIMES_GIT_REF" >> "$GITHUB_OUTPUT"

          # Get Kiegroup Apps Git Ref
          APPS_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__kogitoAppsRepoUrl}}" refs/heads/main | awk '{print $1}')
          echo "DROOLS_AND_KOGITO__kogitoAppsRepoGitRef=$APPS_GIT_REF" >> "$GITHUB_OUTPUT"
          Get Kiegroup Drools Git Ref

      - name: Prepare maven-base with .mvn/maven.config
        id: prepare_maven_base_config
        run: |
          mkdir ./packages/maven-base/.mvn
          echo "-Dversion.org.kie.kogito=999-SNAPSHOT" > "./packages/maven-base/.mvn/maven.config"
          echo "--no-snapshot-updates" >> "./packages/maven-base/.mvn/maven.config"

      - name: Build KIE Tools
        env:
          DROOLS_AND_KOGITO__skip: true
          KOGITO_RUNTIME_version: "999-SNAPSHOT"
          DROOLS_AND_KOGITO__droolsRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__droolsRepoGitRef}}"
          DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef}}"
          DROOLS_AND_KOGITO__kogitoAppsRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoAppsRepoGitRef}}"
        run: mvn clean install

      # This step works well but can consume midstream storage
      # - name: Upload JAR artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: kie-tools-artifacts
      #     path: |
      #       packages/sonataflow-quarkus-devui/sonataflow-quarkus-devui/target/sonataflow-quarkus-devui-999-SNAPSHOT.jar
      #       packages/sonataflow-quarkus-devui/sonataflow-quarkus-devui-deployment/target/sonataflow-quarkus-devui-deployment-999-SNAPSHOT.jar
      #       packages/sonataflow-management-console-webapp/target/sonataflow-management-console-webapp-999-SNAPSHOT-image-build.zip
