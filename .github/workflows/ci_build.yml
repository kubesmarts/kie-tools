#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: "CI :: Build"

on:
  push:
    branches: [9.104.x-prod]
  pull_request:
    branches: ["**"]
    types: [opened, reopened, ready_for_review, synchronize]

concurrency:
  group: ${{ github.event.pull_request && format('ci-build-full-pr-{0}', github.event.pull_request.number) || format('ci-build-full-push-main-{0}', github.sha) }}
  cancel-in-progress: true

env:
  TMPDIR: "/tmp"
  BUILD_ENV__accessErrorsLogFileAbsolutePath: "/tmp/build-env-access-errors.log"

jobs:
  run:
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13]
        partition: [0]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Support longpaths"
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        id: checkout_pr
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ github.base_ref }}

      - name: "Setup pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: 9.3.0

      - name: "Setup Node"
        uses: actions/setup-node@v4
        with:
          node-version: 22.13.1

      - name: "Setup CI patterns"
        id: ci_patterns
        uses: ./.github/actions/setup-ci-patterns

      - name: "Setup build mode {none,full,partial}"
        id: setup_build_mode
        shell: bash
        run: |

          npm -g install bun@1.1.6 turbo@2.1.2

          echo '{}' > turbo.json

          turbo telemetry disable

          bun ./.github/supporting-files/ci/build-partitioning/build_partitioning.ts \
            --outputPath='/tmp/partitions.json' \
            --tmpPartitionFilterPath='/tmp/partition-filter.txt' \
            --forceFull='${{ !github.event.pull_request }}' \
            --baseSha='${{ steps.checkout_pr.outputs.base_sha }}' \
            --headSha='${{steps.checkout_pr.outputs.head_sha }}' \
            --graphJsonPath='./repo/graph.json' \
            --partition='./.github/supporting-files/ci/partitions/partition0.txt'

          npm -g uninstall bun turbo

          rm turbo.json

          echo "mode=$(jq --raw-output '.[${{ matrix.partition }}].mode' /tmp/partitions.json)" >> $GITHUB_OUTPUT
          echo "bootstrapPnpmFilterString=$(jq --raw-output '.[${{ matrix.partition }}].bootstrapPnpmFilterString' /tmp/partitions.json)" >> $GITHUB_OUTPUT
          echo "fullBuildPnpmFilterString=$(jq --raw-output '.[${{ matrix.partition }}].fullBuildPnpmFilterString' /tmp/partitions.json)" >> $GITHUB_OUTPUT
          echo "upstreamPnpmFilterString=$(jq --raw-output '.[${{ matrix.partition }}].upstreamPnpmFilterString' /tmp/partitions.json)" >> $GITHUB_OUTPUT
          echo "affectedPnpmFilterString=$(jq --raw-output '.[${{ matrix.partition }}].affectedPnpmFilterString' /tmp/partitions.json)" >> $GITHUB_OUTPUT
          echo "Done."

      - name: "Setup environment"
        if: steps.setup_build_mode.outputs.mode != 'none'
        uses: ./.github/actions/setup-env

      - name: "Clone and Build Drools, Runtimes and Apps Repositories"
        run: |
          echo "Cloning and building extra repositories from 9.104.x-prod branch."
          cd ..

          echo "Cloning drools 9.104.x-prod branch)..."
          git clone --depth 1 --branch 9.104.x-prod https://github.com/kiegroup/drools.git
          cd drools
          mvn clean install -B -Dquickly -Dproductized
          cd ..
          rm -rf drools

          echo "Cloning kogito-runtimes (9.104.x-prod branch)..."
          git clone --depth 1 --branch 9.104.x-prod https://github.com/kiegroup/kogito-runtimes.git
          cd kogito-runtimes
          mvn clean install -B -Dquickly -Dproductized
          cd ..
          rm -rf kogito-runtimes

          echo "Cloning kogito-apps (9.104.x-prod branch)..."
          git clone --depth 1 --branch 9.104.x-prod https://github.com/kiegroup/kogito-apps.git
          cd kogito-apps
          mvn clean install -B -Dquickly -Dproductized
          cd ..
          rm -rf kogito-apps

      - name: Prepare maven-base with .mvn/maven.config
        id: prepare_maven_base_config
        run: |
          mkdir ./packages/maven-base/.mvn
          echo "-Dversion.org.kie.kogito=9.104.0" > "./packages/maven-base/.mvn/maven.config"
          echo "--no-snapshot-updates" >> "./packages/maven-base/.mvn/maven.config"

      - name: "Bootstrap"
        if: steps.setup_build_mode.outputs.mode != 'none'
        env:
          DROOLS_AND_KOGITO__skip: true
          KOGITO_RUNTIME_version: "9.104.0"
          MAVEN_ARGS: "-B -Puse-maven-repo-local-tail"
          MAVEN_OPTS: "-Xmx3g"
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: ${{ steps.setup_build_mode.outputs.bootstrapPnpmFilterString }}

      - name: Replace pre-build step in kogito-db-migrator-tool (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sed -i "s/pnpm pre-build && //g" ./packages/kogito-db-migrator-tool/package.json

      - name: Replace pre-build step in kogito-db-migrator-tool (MacOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          sed -i '' "s/pnpm pre-build && //g" ./packages/kogito-db-migrator-tool/package.json

      - name: Modify pom.xml of sonataflow-quarkus-devui
        run: python .github/supporting-files/ci/osl/pom-manipulation/inject-fmp-executions.py

      - name: "FULL → Build"
        if: steps.setup_build_mode.outputs.mode == 'full'
        shell: bash
        env:
          WEBPACK__minimize: "false"
          WEBPACK__tsLoaderTranspileOnly: "false"
          KOGITO_RUNTIME_version: "9.104.0"
          KIE_TOOLS_BUILD__runLinters: "true"
          KIE_TOOLS_BUILD__runTests: "false"
          KIE_TOOLS_BUILD__runEndToEndTests: "false"
          KIE_TOOLS_BUILD__containerizedEndToEndTests: "false"
          KIE_TOOLS_BUILD__buildContainerImages: "false"
          KIE_TOOLS_BUILD__buildExamples: "true"
          KIE_TOOLS_BUILD__ignoreTestFailures: ${{ !github.event.pull_request }}
          KIE_TOOLS_BUILD__ignoreEndToEndTestFailures: ${{ !github.event.pull_request }}
          DISPLAY: ":99.0"
          START_SERVER_AND_TEST_INSECURE: "true"
          NODE_OPTIONS: "--max_old_space_size=6144"
          MAVEN_ARGS: "-B -Puse-maven-repo-local-tail"
          MAVEN_OPTS: "-Xmx2g"
        run: >-
          eval "pnpm ${{ steps.setup_build_mode.outputs.fullBuildPnpmFilterString }} -F '!@kie-tools/dmn-marshaller-backend-compatibility-tester' --workspace-concurrency=1 build:prod"

      - name: "PARTIAL → Build upstream"
        if: steps.setup_build_mode.outputs.mode == 'partial' && steps.setup_build_mode.outputs.upstreamPnpmFilterString != ''
        shell: bash
        env:
          KIE_TOOLS_BUILD__buildContainerImages: ${{ runner.os == 'Linux' }}
          KIE_TOOLS_BUILD__buildExamples: "true"
          NODE_OPTIONS: "--max_old_space_size=6144"
          MAVEN_ARGS: "-B -Puse-maven-repo-local-tail"
          MAVEN_OPTS: "-Xmx2g"
        run: |
          eval "pnpm ${{ steps.setup_build_mode.outputs.upstreamPnpmFilterString }} -F '!@kie-tools/dmn-marshaller-backend-compatibility-tester' build:dev"

      - name: "PARTIAL → Build changed and downstream"
        shell: bash
        if: steps.setup_build_mode.outputs.mode == 'partial'
        env:
          WEBPACK__minimize: "false"
          KIE_TOOLS_BUILD__runLinters: "true"
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__runEndToEndTests: ${{ runner.os == 'Linux' }}
          KIE_TOOLS_BUILD__buildContainerImages: ${{ runner.os == 'Linux' }}
          KIE_TOOLS_BUILD__buildExamples: "true"
          DISPLAY: ":99.0"
          START_SERVER_AND_TEST_INSECURE: "true"
          NODE_OPTIONS: "--max_old_space_size=6144"
          MAVEN_ARGS: "-B -Puse-maven-repo-local-tail"
          MAVEN_OPTS: "-Xmx2g"
        run: |
          eval "pnpm ${{ steps.setup_build_mode.outputs.affectedPnpmFilterString }} -F '!@kie-tools/dmn-marshaller-backend-compatibility-tester' --workspace-concurrency=1 build:prod"

      - name: "Check tests result (`9.104.x-prod` only)"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none'
        uses: actions/github-script@v6
        env:
          KIE_TOOLS_CI__JUNIT_REPORT_RESULTS_PATTERNS: |-
            ${{ steps.ci_patterns.outputs.tests_reports_patterns }}
            ${{ steps.ci_patterns.outputs.end_to_end_tests_reports_patterns }}
        with:
          result-encoding: string
          script: |
            const patterns = process.env["KIE_TOOLS_CI__JUNIT_REPORT_RESULTS_PATTERNS"]
                                .split("\n")
                                .map(p => p.trim())
                                .filter(p => p);

            const script = require("./scripts/check-junit-report-results/src/index.js");
            await script({ core, glob, patterns });

      - name: "Check build-env access errors log"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none'
        shell: bash
        run: |
          touch "$BUILD_ENV__accessErrorsLogFileAbsolutePath"
          cat "$BUILD_ENV__accessErrorsLogFileAbsolutePath"
          [ "0" == "$(cat "$BUILD_ENV__accessErrorsLogFileAbsolutePath" | wc -l | tr -d ' ')" ]

      - name: "Upload reports and artifacts"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none'
        uses: ./.github/actions/upload-ci-reports-and-artifacts
        with:
          partition_index: ${{ matrix.partition }}

      - name: "Upload end-to-end tests results to Buildkite (`9.104.x-prod` only)"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none' && !github.event.pull_request
        shell: bash
        env:
          BUILDKITE_ANALYTICS_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
          BUILDKITE_BRANCH: ${{ github.ref_name }}
          BUILDKITE_MESSAGE: ${{ github.event.commits[0].message }}
        run: |
          eval "find -P * -type f ${{ steps.ci_patterns.outputs.end_to_end_tests_reports_patterns_for_find }}"
          echo "---------------------------- starting upload -----------------------"
          eval "find -P * -type f ${{ steps.ci_patterns.outputs.end_to_end_tests_reports_patterns_for_find }}" | xargs -I{} curl -X POST \
            -H "Authorization: Token token=\"$BUILDKITE_ANALYTICS_TOKEN\"" \
            -F "format=junit" \
            -F "data=@{}" \
            -F "run_env[CI]=github_actions" \
            -F "run_env[key]=$GITHUB_ACTION-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ATTEMPT" \
            -F "run_env[number]=$GITHUB_RUN_NUMBER" \
            -F "run_env[branch]=$BUILDKITE_BRANCH" \
            -F "run_env[commit_sha]=$GITHUB_SHA" \
            -F "run_env[message]=$BUILDKITE_MESSAGE" \
            -F "run_env[url]=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            https://analytics-api.buildkite.com/v1/uploads

      - name: "Print storage usage (after build)"
        if: always() && !cancelled()
        shell: bash
        run: |
          df -h .
