name: "CI :: OSL :: Export Dist to osl-images"

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.KIE1_TOKEN }}
  PNPM_FILTER: ${{ vars.OSL_IMAGES_PNPM_FILTER }}
  OSL_PACKAGES: ${{ vars.OSL_IMAGES_PACKAGES }}

jobs:
  export_dist:
    runs-on: ubuntu-latest
    if: ${{ vars.ENABLE_OSL_DIST_EXPORT == 'yes' }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.KIE1_TOKEN }}
          ref: main

      - name: Setup Git Environment
        run: |
          git config --global user.name "${{ secrets.KIE1_USER_NAME }}"
          git config --global user.email "${{ secrets.KIE1_EMAIL }}"

      - name: Setup Environment
        uses: ./.github/actions/setup-env

      - name: "Clone and Build Drools, Runtimes and Apps Repositories"
        run: |
          echo "KOGITO_RUNTIME_version is $KOGITO_RUNTIME_version: Cloning and building extra repositories."
          cd ..

          echo "Cloning drools main branch)..."
          git clone --depth 1 --branch main https://github.com/kiegroup/drools.git
          cd drools
          mvn clean install -Dquickly
          cd ..
          rm -rf drools

          echo "Cloning kogito-runtimes (main branch)..."
          git clone --depth 1 --branch main https://github.com/kiegroup/kogito-runtimes.git
          cd kogito-runtimes
          mvn clean install -Dquickly
          cd ..
          rm -rf kogito-runtimes

          echo "Cloning kogito-apps (main branch)..."
          git clone --depth 1 --branch main https://github.com/kiegroup/kogito-apps.git
          cd kogito-apps
          mvn clean install -Dquickly
          cd ..
          rm -rf kogito-apps

      - name: Run pnpm bootstrap - first time
        run: pnpm bootstrap -F '@osl/redhat-env...' --no-frozen-lockfile
        env:
          DROOLS_AND_KOGITO__skip: true
          KOGITO_RUNTIME_version: "9.104.0"
        shell: bash

      - name: Setup Environment Variables
        run: bash ./.github/supporting-files/ci/osl/export_vars.sh
        shell: bash

      - name: Get Kiegroup git ref urls
        id: get_kiegroup_git_refs
        run: |
          # Get Kiegroup Drools Git Ref
          DROOLS_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__droolsRepoUrl}}" refs/heads/main | awk '{print $1}')
          echo "DROOLS_AND_KOGITO__droolsRepoGitRef=$DROOLS_GIT_REF" >> "$GITHUB_OUTPUT"

          # Get Kiegroup Runtimes Git Ref
          RUNTIMES_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__kogitoRuntimesRepoUrl}}" refs/heads/main | awk '{print $1}')
          echo "DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef=$RUNTIMES_GIT_REF" >> "$GITHUB_OUTPUT"

          # Get Kiegroup Apps Git Ref
          APPS_GIT_REF=$(git ls-remote "${{ env.DROOLS_AND_KOGITO__kogitoAppsRepoUrl}}" refs/heads/main | awk '{print $1}')
          echo "DROOLS_AND_KOGITO__kogitoAppsRepoGitRef=$APPS_GIT_REF" >> "$GITHUB_OUTPUT"

      - name: Prepare maven-base with .mvn/maven.config
        id: prepare_maven_base_config
        run: |
          mkdir ./packages/maven-base/.mvn
          echo "-Dversion.org.kie.kogito=9.104.0" > "./packages/maven-base/.mvn/maven.config"
          echo "--no-snapshot-updates" >> "./packages/maven-base/.mvn/maven.config"

      - name: Run pnpm bootstrap - second time
        run: eval "pnpm bootstrap ${{ env.PNPM_FILTER }} --no-frozen-lockfile"
        env:
          DROOLS_AND_KOGITO__skip: true
          KOGITO_RUNTIME_version: "9.104.0"
          DROOLS_AND_KOGITO__droolsRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__droolsRepoGitRef}}"
          DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoRuntimesRepoGitRef}}"
          DROOLS_AND_KOGITO__kogitoAppsRepoGitRef: "${{ steps.get_kiegroup_git_refs.outputs.DROOLS_AND_KOGITO__kogitoAppsRepoGitRef}}"
        shell: bash

      - name: Replace pre-build step in kogito-db-migrator-tool
        run: |
          sed -i "s/pnpm pre-build && //g" ./packages/kogito-db-migrator-tool/package.json

      - name: Modify pom.xml of sonataflow-quarkus-devui
        run: python .github/supporting-files/ci/osl/pom-manipulation/inject-fmp-executions.py

      - name: Build OSL Packages
        run: eval "pnpm ${{ env.PNPM_FILTER }} --workspace-concurrency=1 build:prod"
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        shell: bash

      - name: Checkout Target Repo (osl-images)
        uses: actions/checkout@v4
        with:
          repository: kubesmarts/osl-images
          token: ${{ secrets.KIE1_TOKEN }}
          path: target-repo

      - name: Consolidate Dist Outputs to Target Repo
        run: |
          set -euo pipefail

          BASE="target-repo/images-dist"
          mkdir -p "$BASE/modules" "$BASE/scripts"

          for pkg in ${{ env.OSL_PACKAGES }}; do
            SRC="packages/${pkg}/dist"
            echo "🖨 Processing dist for $pkg"

            if [ ! -d "$SRC" ]; then
              echo "⚠️  $SRC not found, skipping."
              continue
            fi

            # ── Merge modules ───────────────────────────────────────────────────────
            if [ -d "$SRC/modules" ]; then
              cp -r "$SRC/modules/"* "$BASE/modules/"
            fi

            # ── Merge scripts ───────────────────────────────────────────────────────
            if [ -d "$SRC/scripts" ]; then
              cp -r "$SRC/scripts/"* "$BASE/scripts/"
            fi

            # ── Copy package YAMLs ──────────────────────────────────────────────────
            for yf in "$SRC"/*.yaml; do
              fname="$(basename "$yf")"
              case "$fname" in
                content-sets.yaml)
                  # only copy the first one
                  if [ ! -f "$BASE/content-sets.yaml" ]; then
                    cp "$yf" "$BASE/"
                  fi
                  ;;
                *)
                  # this will copy image.yaml (or any other yaml) for each pkg
                  cp "$yf" "$BASE/"
                  ;;
              esac
            done

            # ── Skip tests/ and Makefile ───────────────────────────────────────────
            # (We never copied them, so nothing to remove.)
          done
        shell: bash

      - name: Commit and Push to Target Repo
        run: |
          set -euo pipefail
          cd target-repo

          BRANCH="export-dist-$(date +'%Y%m%d-%H%M%S')"
          git checkout -b "$BRANCH"
          git add .
          git commit -m "chore: export OSL dist from main"
          git push -u origin "$BRANCH"
          echo "EXPORT_BRANCH=$BRANCH" >> $GITHUB_ENV
        shell: bash

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.KIE1_TOKEN }}
          SYNC_REVIEWERS: ${{ vars.SYNC_REVIEWERS }}
        run: |
          set -euo pipefail

          PR_TITLE="[$(date +'%Y-%m-%d:%H%M%S')] - :robot: Export OSL dist from main"
          REVIEWERS_OPTION=""
          if [[ -n "$SYNC_REVIEWERS" ]]; then
            REVIEWERS_OPTION="--reviewer $SYNC_REVIEWERS"
          fi

          PR_URL=$(gh pr create \
            --repo kubesmarts/osl-images \
            --title "$PR_TITLE" \
            --body "This PR includes the latest dist output for packages: $OSL_PACKAGES" \
            --base 9.104.x-prod \
            --head "$EXPORT_BRANCH" $REVIEWERS_OPTION)

          echo "✅ Created PR: $PR_URL"
        shell: bash
